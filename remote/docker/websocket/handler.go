package websocket

import (
	"encoding/json"
	"github.com/gofiber/websocket/v2"
	"pentest-backend/remote/docker"
)

type client struct{} // Add more data to this type if needed

var Clients = make(map[*websocket.Conn]client) // Note: although large maps with pointer-like types (e.g. strings) as keys are slow, using pointers themselves as keys is acceptable and fast
var Register = make(chan *websocket.Conn)
var Broadcast = make(chan docker.WebSocketResponse)
var Unregister = make(chan *websocket.Conn)

func RunWebSocket() {
	for {
		select {
		case connection := <-Register:
			Clients[connection] = client{}

		case response := <-Broadcast:

			// Send the message to all clients
			for connection := range Clients {
				responseMessage, _ := json.Marshal(response)
				if err := connection.WriteMessage(websocket.TextMessage, []byte(responseMessage)); err != nil {
					Unregister <- connection
					connection.WriteMessage(websocket.CloseMessage, []byte{})
					connection.Close()
				}
			}

		case connection := <-Unregister:
			// Remove the client from the hub
			delete(Clients, connection)
		}
	}
}
