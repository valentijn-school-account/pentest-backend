package docker

import (
	"context"
	"fmt"
	uuid2 "github.com/docker/distribution/uuid"
	"github.com/docker/docker/api/types"
	"github.com/docker/docker/api/types/container"
	"github.com/docker/docker/api/types/network"
	"github.com/docker/docker/client"
	"github.com/docker/go-connections/nat"
	"io"
	"os"
	"pentest-backend/database"
	"pentest-backend/database/models"
)

func CreateContainer(ctx context.Context, user models.User, project models.Project) (error, models.Container) {

	//Pulls image for container.
	reader, err := DockerClient.ImagePull(ctx, project.Image, types.ImagePullOptions{})
	if err != nil {
		return err, models.Container{}
	}

	defer reader.Close()
	io.Copy(os.Stdout, reader)

	//Sets up ports for container
	exposedPorts, portBindings, _ := nat.ParsePortSpecs(project.Ports)

	//Creates container
	resp, err := DockerClient.ContainerCreate(ctx, &container.Config{
		Image:        project.Image,
		ExposedPorts: exposedPorts,
		Cmd:          []string{"bash"},
		Tty:          true,
	}, &container.HostConfig{
		PortBindings: portBindings, // it supposed to be nat.PortMap
	}, &network.NetworkingConfig{}, nil, fmt.Sprintf("%s-%s", user.FirstName, project.Name))

	if err != nil {
		return err, models.Container{}
	}

	uuid := uuid2.Generate()

	//Creates database entry for container
	dockerContainer := models.Container{
		UUID:       uuid.String(),
		ProjectID:  project.ID,
		UserID:     user.ID,
		DockerUUID: resp.ID,
	}

	database.Client.Table("containers").Create(&dockerContainer)
	return nil, dockerContainer
}

func StartContainer(ctx context.Context, container models.Container) error {
	return DockerClient.ContainerStart(ctx, container.DockerUUID, types.ContainerStartOptions{})
}

func SendCommand(ctx context.Context, container models.Container, command []string) (types.IDResponse, error) {
	docker, err := client.NewEnvClient()
	if err != nil {
		return types.IDResponse{}, err
	}

	config := types.ExecConfig{
		AttachStderr: true,
		AttachStdout: true,
		Cmd:          command,
	}

	return docker.ContainerExecCreate(ctx, container.DockerUUID, config)
}

func GetLogs(ctx context.Context, container models.Container) (io.ReadCloser, error) {
	options := types.ContainerLogsOptions{ShowStdout: true}
	// Replace this ID with a container that really exists
	out, err := DockerClient.ContainerLogs(ctx, container.DockerUUID, options)
	return out, err
}
