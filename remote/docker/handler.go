package docker

import (
	"context"
	"fmt"
	"github.com/docker/docker/api/types"
	"github.com/gofiber/websocket/v2"
	"pentest-backend/database/models"
)

type C struct {
	Container models.Container
} // Add more data to this type if needed

var Attachments = make(map[models.Container]chan string)
var Clients = make(map[*websocket.Conn]C) // Note: although large maps with pointer-like types (e.g. strings) as keys are slow, using pointers themselves as keys is acceptable and fast
var Register = make(chan *websocket.Conn)
var Broadcast = make(chan WebSocketResponse)
var Unregister = make(chan *websocket.Conn)

func AttachContainer(container models.Container) {
	var Commands = make(chan string)
	attach, err := DockerClient.ContainerAttach(context.Background(), container.DockerUUID, types.ContainerAttachOptions{Logs: true, Stream: true, Stderr: true, Stdin: true, Stdout: true})

	if err != nil {
		panic(err)
	}

	Attachments[container] = Commands

	defer attach.Close()
	for {
		select {
		case command := <-Commands:
			attach.Conn.Write([]byte(command + "\n"))
			fmt.Printf("%v", command)
		}
	}
}

func RunWebSocket() {
	for {
		select {
		case connection := <-Register:
			go CreateChannel(connection, Clients[connection].Container)
		case response := <-Broadcast:
			if err := response.Client.WriteJSON(response); err != nil {
				response.Client.WriteMessage(websocket.CloseMessage, []byte{})
			}

		case connection := <-Unregister:
			// Remove the client from the hub
			delete(Clients, connection)
		}
	}
}
