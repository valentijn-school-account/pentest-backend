package prometheus

import (
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"pentest-backend/database/models"
	"time"
)

func FetchWeekExperience(user models.User) ([]ExperienceEntry, error) {
	var entries []ExperienceEntry

	for i := 0; i <= 6; i++ {
		date := time.Now().AddDate(0, 0, -i)
		resp, err := http.Get("http://localhost:9090/api/v1/query?query=" + "pentest_experience_sum" + url.QueryEscape("{") + "user" + url.QueryEscape("=") + url.QueryEscape("\"") + fmt.Sprintf("%v", user.ID) + url.QueryEscape("\"") + url.QueryEscape(",") + "day" + url.QueryEscape("=") + url.QueryEscape("\"") + fmt.Sprintf("%v", date.Weekday().String()) + url.QueryEscape("\"") + url.QueryEscape(",") + "date" + url.QueryEscape("=") + url.QueryEscape("\"") + fmt.Sprintf("%v", date.Format("2006-01-02")) + url.QueryEscape("\"") + url.QueryEscape("}") + "&time=" + fmt.Sprintf("%v", date.Unix()))
		if err != nil {
			return nil, err
		}

		body, err := io.ReadAll(resp.Body)

		var data Response

		err = json.Unmarshal(body, &data)
		if err != nil {
			fmt.Printf("%v", string(body))
			return nil, err
		}

		if len(data.Data.Data) == 0 || len(data.Data.Data[0].Values) == 0 {
			entries = append(entries, ExperienceEntry{Day: date.Weekday().String(), Value: "0"})
		} else {
			entries = append(entries, ExperienceEntry{Day: date.Weekday().String(), Value: data.Data.Data[0].Values[1].String()})
		}
	}

	return entries, nil
}
