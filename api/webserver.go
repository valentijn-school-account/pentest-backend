package api

import (
	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/websocket/v2"
	"net/http"
	"pentest-backend/api/controllers/guest"
	user2 "pentest-backend/api/controllers/user"
	class2 "pentest-backend/api/controllers/user/class"
	"pentest-backend/api/controllers/user/containers"
	"pentest-backend/api/controllers/user/projects"
	"pentest-backend/api/middleware"
	"pentest-backend/remote/docker"
)

func StartServer() {
	app := fiber.New() // Creates an instance of fiber

	//TODO: route groups here

	//Guest route
	app.Get("/", func(ctx *fiber.Ctx) error { return ctx.SendStatus(http.StatusAccepted) })
	app.Post("/login", guest.HandleLogin)

	//User route
	user := app.Group("/user")
	user.Use(middleware.VerifyCookie)
	app.Get("/", func(ctx *fiber.Ctx) error { return ctx.SendStatus(http.StatusAccepted) })
	app.Get("/account", user2.HandleAccountInformation)
	app.Get("/projects", projects.HandleIndexProjects)

	container := user.Group("/container/:container")
	container.Use(middleware.InjectContainer)
	container.Get("/", containers.HandleGetContainer)
	container.Get("/logs", containers.HandleLogsProject)
	container.Post("/start", containers.HandleStartContainer)
	container.Post("/kill", containers.HandleKillContainer)

	class := user.Group("/class")
	class.Get("/", class2.HandleFetchClass)
	class.Delete("/", class2.HandleLeaveClass)
	class.Post("/", class2.HandleJoinClass)

	container.Use("/ws", func(c *fiber.Ctx) error {
		// IsWebSocketUpgrade returns true if the client
		// requested upgrade to the WebSocket protocol.
		if websocket.IsWebSocketUpgrade(c) {
			c.Locals("allowed", true)
			return c.Next()
		}
		return fiber.ErrUpgradeRequired
	})

	container.Get("/ws/fetch", docker.GetWebSocketHandler())

	project := user.Group("/project/:project")
	project.Use(middleware.InjectProject)
	project.Get("/", projects.HandleGetProject)
	project.Get("/containers", projects.HandleGetContainers)
	project.Post("/init", projects.HandleInitializationProject)

	step := project.Group("/step/:step")
	step.Use(middleware.InjectSteps)
	step.Post("/complete", projects.HandleNextStep)

	err := app.Listen(":8080") //Creates an app on HTTP port 8080

	if err != nil {
		return
	}
}
