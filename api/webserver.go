package api

import (
	"fmt"
	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/fiber/v2/middleware/cors"
	"github.com/gofiber/fiber/v2/middleware/proxy"
	"github.com/gofiber/websocket/v2"
	ws "github.com/gofiber/websocket/v2"
	"net/http"
	"pentest-backend/api/controllers/guest"
	"pentest-backend/api/controllers/teacher/classes"
	user2 "pentest-backend/api/controllers/user"
	class2 "pentest-backend/api/controllers/user/class"
	"pentest-backend/api/controllers/user/containers"
	"pentest-backend/api/controllers/user/projects"
	"pentest-backend/api/controllers/user/projects/steps"
	"pentest-backend/api/controllers/user/statistics"
	"pentest-backend/api/controllers/user/topic"
	"pentest-backend/api/middleware"
	"pentest-backend/database/models"
	"pentest-backend/remote/docker"
	"strings"
)

func StartServer() {
	app := fiber.New() // Creates an instance of fiber

	app.Use(cors.New())

	//TODO: route groups here

	//Guest route
	app.Get("/", func(ctx *fiber.Ctx) error { return ctx.SendStatus(http.StatusAccepted) })
	app.Post("/login", guest.HandleLogin)

	//User route
	user := app.Group("/user")
	user.Use(middleware.VerifyCookie)
	user.Get("/", func(ctx *fiber.Ctx) error { return ctx.SendStatus(http.StatusAccepted) })
	user.Get("/account", user2.HandleAccountInformation)
	user.Get("/projects", projects.HandleIndexProjects)
	user.Get("/progress", projects.HandleProjectsProgression)
	user.Get("/topics", topic.HandleIndexTopics)
	user.Get("/sample_data", statistics.HandleSampleDataCreation)
	user.Get("/statistics", statistics.HandleFetchingStatistics)

	topics := user.Group("/topic/:topic")
	topics.Use(middleware.InjectTopic)
	topics.Get("/", topic.HandleGetTopic)
	topics.Get("/concepts", topic.HandleIndexConcepts)

	container := user.Group("/container/:container")
	container.Use(middleware.InjectContainer)
	container.Get("/", containers.HandleGetContainer)
	container.Get("/logs", containers.HandleLogsProject)
	container.Post("/start", containers.HandleStartContainer)
	container.Post("/kill", containers.HandleKillContainer)

	proxyContainer := container.Group("/proxy")
	proxyContainer.Use(middleware.InjectAllocation)
	proxyContainer.Use(func(c *fiber.Ctx) error {
		path := strings.Replace(string(c.Request().URI().Path()), fmt.Sprintf("/user/container/%s/proxy", c.Locals("container").(models.Container).UUID), "", -1)
		if c.Locals("allocation") == nil {
			return fiber.NewError(http.StatusInternalServerError)
		}

		allocation := c.Locals("allocation").(string)
		return proxy.Do(c, fmt.Sprintf("http://0.0.0.0:%s%s", allocation, path))
	})
	class := user.Group("/class")
	class.Get("/", class2.HandleFetchClass)
	class.Delete("/", class2.HandleLeaveClass)
	class.Post("/", class2.HandleJoinClass)
	class.Get("/rank", class2.HandleRankFetching)
	class.Get("/people", class2.HandleListClass)

	app.Use("/ws/fetch/:container", func(c *fiber.Ctx) error {
		if websocket.IsWebSocketUpgrade(c) {
			return c.Next()
		}

		return fiber.ErrUpgradeRequired
	})

	app.Get("/ws/fetch/:container", ws.New(docker.GetWebSocketHandler))

	project := user.Group("/project/:project")
	project.Use(middleware.InjectProject)
	project.Get("/", projects.HandleGetProject)
	project.Get("/containers", projects.HandleGetContainers)
	project.Post("/init", projects.HandleInitializationProject)
	project.Post("/complete", steps.HandleProjectCompletion)

	project.Post("/previous", steps.HandlePreviousStep)
	project.Get("/step", steps.HandleGetStep)

	step := project.Group("/step/:step")
	step.Use(middleware.InjectSteps)
	step.Post("/complete", steps.HandleNextStep)

	teacher := app.Group("/teacher")
	teacher.Use(middleware.InjectTeacher)
	teacher.Get("/classes", classes.HandleListClasses)
	teacher.Post("/", classes.HandleCreateClass)

	teacherClass := teacher.Group("/classes/:class")
	teacherClass.Use(middleware.InjectClass)
	teacherClass.Get("/", classes.HandleGetClass)
	teacherClass.Get("/people", classes.HandleListUsers)
	teacherClass.Delete("/pupil", classes.HandleRemovePupil)

	err := app.Listen("0.0.0.0:8080") //Creates an app on HTTP port 8080

	if err != nil {
		return
	}
}
