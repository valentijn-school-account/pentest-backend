package guest

import (
	"fmt"
	"github.com/dgrijalva/jwt-go"
	"github.com/gofiber/fiber/v2"
	"net/http"
	"pentest-backend/database"
	"pentest-backend/database/models"
	"pentest-backend/remote/google"
	"strings"
	"time"
)

type TokenParam struct {
	GoogleJWT string `json:"token"`
}

//Route: /login
func HandleLogin(c *fiber.Ctx) error {
	var param TokenParam

	err := c.BodyParser(&param)
	if err != nil {
		return fiber.NewError(http.StatusBadRequest, fmt.Sprintf("Could not parse Google JWT Token, %v", err))
	}

	// Validate the JWT is valid
	claims, err := google.ValidateGoogleJWT(param.GoogleJWT)
	if err != nil {
		return fiber.NewError(http.StatusBadRequest, fmt.Sprintf("Invalid google auth, %v", err))
	}

	token := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)

	// create a JWT for OUR app and give it back to the client for future requests
	tokenString, err := token.SignedString([]byte(google.JWTSecret))
	if err != nil {
		return fiber.NewError(http.StatusInternalServerError, "Couldn't make authentication token")
	}

	var user models.User
	database.Client.Table("users").Where(&models.User{Mail: claims.Email}).First(&user)

	if user.ID == 0 {
		if !claims.EmailVerified || !strings.HasSuffix(claims.Email, ".tabor.nl") {
			return fiber.NewError(http.StatusNotAcceptable, "You can't login with this mail.")
		}

		user = models.User{Mail: claims.Email, LastName: claims.LastName, FirstName: claims.FirstName}
		database.Client.Table("users").Create(&user)
	}

	cookie := &fiber.Cookie{
		Name:    "authentication",
		Value:   tokenString,
		Expires: time.Now().Add(time.Hour * 2),
	}

	c.Cookie(cookie)
	return c.SendStatus(http.StatusOK)
}
