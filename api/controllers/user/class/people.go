package class

import (
	"fmt"
	"github.com/gofiber/fiber/v2"
	"net/http"
	"pentest-backend/database"
	"pentest-backend/database/models"
	"pentest-backend/remote/google"
)

type Person struct {
	Name  string `json:"name"`
	Role  string `json:"role"`
	Email string `json:"email"`
	Rank  int    `json:"rank"`
}

func HandleListClass(c *fiber.Ctx) error {
	claims := c.Locals("user").(google.GoogleClaims)
	var user models.User
	var people []Person
	database.Client.Table("users").Where(models.User{Mail: claims.Email}).First(&user)

	if user.ID == 0 {
		return fiber.NewError(http.StatusNotFound, "Could not fetch user details.")
	}

	var class models.Class
	database.Client.Table("classes").Where(&models.Class{UUID: user.Class}).First(&class)

	if class.ID == 0 || user.Class == "" {
		return fiber.NewError(http.StatusBadRequest, "You are not in a class.")
	}

	var students []models.User
	database.Client.Table("users").Order("experience DESC").Where(&models.User{Class: class.UUID}).Find(&students)

	var teacher models.User
	database.Client.Table("users").Where("id", class.TeacherID).First(&teacher)

	people = append(people, Person{Name: fmt.Sprintf("%s %s", teacher.FirstName, teacher.LastName), Email: teacher.Mail, Role: "Teacher", Rank: -1})

	for index, student := range students {
		people = append(people, Person{Name: fmt.Sprintf("%s %s", student.FirstName, student.LastName), Email: student.Mail, Role: "Student", Rank: index + 1})
	}

	return c.JSON(&people)
}
