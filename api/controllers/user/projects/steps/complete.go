package steps

import (
	"github.com/gofiber/fiber/v2"
	"net/http"
	"pentest-backend/database"
	"pentest-backend/database/models"
	"time"
)

func HandleProjectCompletion(c *fiber.Ctx) error {
	flag := c.Query("flag")
	project := c.Locals("project").(models.Project)
	var progress models.Progress
	database.Client.Table("progress").Where(&models.Progress{UserID: c.Locals("user_id").(uint), ProjectID: project.ID}).First(&progress)

	if flag == "" {
		return fiber.NewError(http.StatusBadRequest, "No flag was given.")
	}

	if progress.ID == 0 {
		return fiber.NewError(http.StatusBadRequest, "You have not yet started the project.")
	}

	if progress.Completed {
		return fiber.NewError(http.StatusAlreadyReported, "This project has already been completed.")
	}

	if project.Flag != flag {
		return fiber.NewError(http.StatusNotAcceptable, "You entered the wrong flag, please try again.")
	}

	progress.Completed = true
	progress.UsedAt = time.Now()
	database.Client.Table("progress").Updates(&progress).Where(&models.Progress{UserID: c.Locals("user_id").(uint), ProjectID: project.ID})

	var experienceGained models.ExperienceGained
	database.Client.Table("experiences_gained").Where(&models.ExperienceGained{Date: time.Now().Format("2006-01-02"), Day: time.Now().Weekday().String(), UserID: c.Locals("user_id").(uint)}).FirstOrCreate(&experienceGained)
	experienceGained.Value += project.Difficulty.Experience()
	database.Client.Table("experiences_gained").Save(&experienceGained).Where("id", experienceGained.ID)

	var user models.User
	database.Client.Table("users").Where("id", c.Locals("user_id").(uint)).First(&user)
	user.Experience += project.Difficulty.Experience()
	database.Client.Table("users").Save(&user).Where("id", c.Locals("user_id").(uint))

	return c.SendStatus(http.StatusOK)
}
