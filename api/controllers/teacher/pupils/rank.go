package pupils

import (
	"github.com/gofiber/fiber/v2"
	"net/http"
	"pentest-backend/database"
	"pentest-backend/database/models"
)

type RankResponse struct {
	Rank       int `json:"rank"`
	Experience int `json:"experience"`
}

func HandleRankFetching(c *fiber.Ctx) error {
	claims := c.Locals("pupil").(models.User)
	var user models.User
	database.Client.Table("users").Where(models.User{Mail: claims.Mail}).First(&user)

	if user.ID == 0 {
		return fiber.NewError(http.StatusNotFound, "Could not fetch pupil user details.")
	}

	var class models.Class
	database.Client.Table("classes").Where(&models.Class{UUID: user.Class}).First(&class)

	if class.ID == 0 || user.Class == "" {
		return fiber.NewError(http.StatusBadRequest, "Class of pupil not found.")
	}

	var students []models.User
	database.Client.Table("users").Order("experience DESC").Where(&models.User{Class: class.UUID}).Find(&students)
	index := indexOf(user, students)

	if index == -1 {
		return fiber.NewError(http.StatusInternalServerError, "Could not fetch data, please try again later.")
	}

	return c.JSON(RankResponse{Rank: index + 1, Experience: user.Experience})
}

func indexOf(element models.User, data []models.User) int {
	for k, v := range data {
		if element.ID == v.ID {
			return k
		}
	}
	return -1 //not found.
}
