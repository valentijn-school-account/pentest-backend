package topics

import (
	"fmt"
	"github.com/gofiber/fiber/v2"
	"net/http"
	"pentest-backend/database"
	"pentest-backend/database/models"
)

type ParamSaveTopic struct {
	Topic       string `json:"topic"`
	Concept     string `json:"concept"`
	Description string `json:"description"`
}

func HandleDeleteTopic(c *fiber.Ctx) error {
	var param ParamSaveTopic

	if err := c.BodyParser(&param); err != nil {
		return fiber.NewError(http.StatusUnprocessableEntity, fmt.Sprintf("Can't process data: %v", err))
	}

	if param.Topic == "" || param.Concept == "" || param.Description == "" {
		return fiber.NewError(http.StatusUnprocessableEntity, "Please provide a topic, concept and description")
	}

	var topic models.Topic
	var concept models.Concept

	database.Client.Table("topics").Where(&models.Topic{UUID: param.Topic}).First(&topic)
	database.Client.Table("concepts").Where(&models.Concept{UUID: param.Concept, Topic: param.Topic}).First(&concept)

	if topic.ID == 0 {
		return fiber.NewError(http.StatusNotFound, "Topic was not found.")
	}

	if concept.ID == 0 {
		return fiber.NewError(http.StatusNotFound, "Concept was not found.")
	}

	concept.Description = param.Concept

	database.Client.Table("concepts").Save(&concept).Where("id", concept.ID)
	return c.SendStatus(http.StatusOK)
}
