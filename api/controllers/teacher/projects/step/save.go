package step

import (
	"fmt"
	"github.com/gofiber/fiber/v2"
	"net/http"
	"pentest-backend/database"
	"pentest-backend/database/models"
)

type ParamSaveStep struct {
	Project    string `json:"project"`
	Step       string `json:"step"`
	Header     string `json:"header"`
	Text       string `json:"text"`
	Assignment string `json:"assignment"`
}

func HandleSaveStep(c *fiber.Ctx) error {
	var param ParamSaveStep

	if err := c.BodyParser(&param); err != nil {
		return fiber.NewError(http.StatusUnprocessableEntity, fmt.Sprintf("Can't process data: %v", err))
	}

	if param.Project == "" || param.Step == "" || param.Header == "" || param.Text == "" || param.Assignment == "" {
		return fiber.NewError(http.StatusUnprocessableEntity, "Please provide a project, step, header, text and assignment")
	}

	var project models.Project
	var step models.Step

	database.Client.Table("projects").Where(&models.Project{UUID: param.Project}).First(&project)
	database.Client.Table("steps").Where(&models.Step{ProjectID: project.ID, UUID: param.Step}).First(&step)

	if project.ID == 0 {
		return fiber.NewError(http.StatusNotFound, "Project was not found.")
	}

	if step.ID == 0 {
		return fiber.NewError(http.StatusNotFound, "Step was not found.")
	}

	step.Header = param.Header
	step.Text = param.Text
	step.Assignment = param.Assignment

	database.Client.Table("steps").Save(&step).Where("id", step.ID)
	return c.SendStatus(http.StatusOK)
}
