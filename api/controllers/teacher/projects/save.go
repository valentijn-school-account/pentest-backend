package projects

import (
	"fmt"
	"github.com/gofiber/fiber/v2"
	"net/http"
	"pentest-backend/database"
	"pentest-backend/database/models"
)

type ParamSaveProject struct {
	ProjectUUID  string         `json:"project"`
	Flag         string         `json:"flag"`
	ProjectModel models.Project `json:"data"`
}

func HandleSaveProject(c *fiber.Ctx) error {
	var param ParamSaveProject

	if err := c.BodyParser(&param); err != nil {
		return fiber.NewError(http.StatusUnprocessableEntity, fmt.Sprintf("Can't process data: %v", err))
	}

	param.ProjectModel.Flag = param.Flag

	if param.ProjectUUID == "" || param.ProjectModel.AttackCommands == "" || param.ProjectModel.VictimCommands == "" || param.ProjectModel.Flag == "" || param.ProjectModel.Description == "" || param.ProjectModel.Author == 0 || param.ProjectModel.VictimImage == "" || param.ProjectModel.AttackImage == "" {
		return fiber.NewError(http.StatusUnprocessableEntity, "Please provide the project, the difficulty, commands, images, the flag, the description and the author")
	}

	var project models.Project

	database.Client.Table("projects").Where(&models.Project{UUID: param.ProjectUUID}).First(&project)

	if project.ID == 0 {
		return fiber.NewError(http.StatusNotFound, "Project was not found.")
	}

	var newProject = param.ProjectModel
	newProject.Model = project.Model
	newProject.ID = project.ID
	newProject.UUID = project.UUID

	database.Client.Table("projects").Save(&newProject).Where("id", newProject.ID)
	return c.JSON(&newProject)
}
